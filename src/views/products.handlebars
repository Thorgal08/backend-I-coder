<div class="container py-5">
  <h1 class="mb-4 text-center fw-bold text-primary">Catálogo de Productos</h1>
  
  <!-- Filtros y controles -->
  <div class="row mb-4">
    <div class="col-md-12">
      <div class="card">
        <div class="card-body">
          <form method="GET" class="row g-3">
            <div class="col-md-3">
              <label class="form-label">Categoría</label>
              <input type="text" name="category" class="form-control" placeholder="Filtrar por categoría" value="{{query.category}}">
            </div>
            <div class="col-md-2">
              <label class="form-label">Estado</label>
              <select name="status" class="form-select">
                <option value="">Todos</option>
                <option value="true" {{#if (eq query.status 'true')}}selected{{/if}}>Activos</option>
                <option value="false" {{#if (eq query.status 'false')}}selected{{/if}}>Inactivos</option>
              </select>
            </div>
            <div class="col-md-2">
              <label class="form-label">Ordenar por precio</label>
              <select name="sort" class="form-select">
                <option value="">Sin orden</option>
                <option value="asc" {{#if (eq query.sort 'asc')}}selected{{/if}}>Menor a mayor</option>
                <option value="desc" {{#if (eq query.sort 'desc')}}selected{{/if}}>Mayor a menor</option>
              </select>
            </div>
            <div class="col-md-2">
              <label class="form-label">Por página</label>
              <select name="limit" class="form-select">
                <option value="5" {{#if (eq query.limit '5')}}selected{{/if}}>5</option>
                <option value="10" {{#if (eq query.limit '10')}}selected{{/if}}>10</option>
                <option value="20" {{#if (eq query.limit '20')}}selected{{/if}}>20</option>
              </select>
            </div>
            <div class="col-md-3 d-flex align-items-end">
              <button type="submit" class="btn btn-primary me-2">Filtrar</button>
              <a href="/products" class="btn btn-outline-secondary">Limpiar</a>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Lista de productos -->
  <div class="row g-4 mb-4">
    {{#each products}}
    <div class="col-md-4">
      <div class="card shadow-sm h-100 border-0">
        <div class="card-body d-flex flex-column">
          <div class="d-flex justify-content-between align-items-center mb-2">
            <h5 class="card-title mb-0">{{this.title}}</h5>
            <span class="badge bg-primary fs-6">${{this.price}}</span>
          </div>
          <p class="card-text text-muted mb-2">{{this.description}}</p>
          <ul class="list-unstyled mb-3">
            <li><span class="badge bg-info text-dark">Stock: {{this.stock}}</span></li>
            <li><span class="badge bg-secondary">{{this.category}}</span></li>
            <li><span class="badge bg-warning text-dark">{{this.code}}</span></li>
          </ul>
          <div class="mt-auto">
            <div class="d-flex justify-content-between align-items-center mb-2">
              {{#if this.status}}
                <span class="badge bg-success">Disponible</span>
              {{else}}
                <span class="badge bg-danger">No disponible</span>
              {{/if}}
            </div>
            <div class="d-grid gap-2">
              <a href="/products/{{this._id}}" class="btn btn-outline-primary btn-sm">Ver detalles</a>
              <button class="btn btn-success btn-sm" onclick="addToCart('{{this._id}}')">
                <i class="bi bi-cart-plus"></i> Agregar al carrito
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    {{/each}}
  </div>

  <!-- Paginación -->
  {{#if pagination}}
  <nav aria-label="Paginación de productos">
    <ul class="pagination justify-content-center">
      {{#if pagination.hasPrevPage}}
        <li class="page-item">
          <a class="page-link" href="?page={{pagination.prevPage}}&limit={{query.limit}}&sort={{query.sort}}&category={{query.category}}&status={{query.status}}">Anterior</a>
        </li>
      {{else}}
        <li class="page-item disabled">
          <span class="page-link">Anterior</span>
        </li>
      {{/if}}

      {{#each (range 1 pagination.totalPages)}}
        <li class="page-item {{#if (eq this ../pagination.currentPage)}}active{{/if}}">
          <a class="page-link" href="?page={{this}}&limit={{../query.limit}}&sort={{../query.sort}}&category={{../query.category}}&status={{../query.status}}">{{this}}</a>
        </li>
      {{/each}}

      {{#if pagination.hasNextPage}}
        <li class="page-item">
          <a class="page-link" href="?page={{pagination.nextPage}}&limit={{query.limit}}&sort={{query.sort}}&category={{query.category}}&status={{query.status}}">Siguiente</a>
        </li>
      {{else}}
        <li class="page-item disabled">
          <span class="page-link">Siguiente</span>
        </li>
      {{/if}}
    </ul>
  </nav>

  <div class="text-center text-muted">
    Página {{pagination.currentPage}} de {{pagination.totalPages}}
  </div>
  {{/if}}
</div>

<script>
// Variable global para almacenar el carrito actual
let currentCartId = localStorage.getItem('currentCartId');

// Función para obtener o crear carrito único
async function getOrCreateCart() {
  if (!currentCartId) {
    try {
      const response = await fetch('/api/carts', { method: 'POST' });
      if (response.ok) {
        const cart = await response.json();
        currentCartId = cart._id;
        localStorage.setItem('currentCartId', currentCartId);
      }
    } catch (error) {
      console.error('Error creando carrito:', error);
    }
  }
  return currentCartId;
}

// Función para agregar producto al carrito
async function addToCart(productId) {
  try {
    // Asegurar que tenemos un carrito
    const cartId = await getOrCreateCart();
    if (!cartId) {
      showNotification('Error al crear carrito', 'danger');
      return;
    }
    
    // Agregar producto al carrito
    const response = await fetch(`/api/carts/${cartId}/product/${productId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const result = await response.json();
      showNotification('¡Producto agregado al carrito!', 'success');
      updateCartCounter();
    } else {
      showNotification('Error al agregar producto al carrito', 'danger');
    }
  } catch (error) {
    console.error('Error:', error);
    showNotification('Error de conexión', 'danger');
  }
}

// Mostrar notificaciones tipo toast
function showNotification(message, type) {
  // Crear elemento de notificación
  const notification = document.createElement('div');
  notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
  notification.style.cssText = `
    top: 20px;
    right: 20px;
    z-index: 1050;
    min-width: 300px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  `;
  
  notification.innerHTML = `
    <strong>${type === 'success' ? '✅' : '❌'}</strong> ${message}
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  `;
  
  document.body.appendChild(notification);
  
  // Auto-dismiss después de 3 segundos
  setTimeout(() => {
    notification.remove();
  }, 3000);
}

// Actualizar contador del carrito en la navegación
async function updateCartCounter() {
  if (!currentCartId) return;
  
  try {
    const response = await fetch(`/api/carts/${currentCartId}`);
    if (response.ok) {
      const cart = await response.json();
      // Verificar que cart.products existe y es un array
      const products = cart.products || [];
      const totalItems = Array.isArray(products) ? 
        products.reduce((sum, item) => sum + (item.quantity || 0), 0) : 0;
      
      // Buscar y actualizar el contador en el navbar
      const cartLink = document.querySelector('a[href*="carrito"], a[href*="cart"]');
      if (cartLink) {
        let badge = cartLink.querySelector('.badge');
        if (!badge) {
          badge = document.createElement('span');
          badge.className = 'badge bg-danger rounded-pill ms-1';
          cartLink.appendChild(badge);
        }
        badge.textContent = totalItems > 0 ? totalItems : '';
        badge.style.display = totalItems > 0 ? 'inline' : 'none';
      }
    }
  } catch (error) {
    console.error('Error actualizando contador:', error);
  }
}

// Función para ir al carrito actual
function goToCurrentCart() {
  if (currentCartId) {
    window.location.href = `/carts/${currentCartId}`;
  } else {
    showNotification('No tienes un carrito activo. Agrega productos para crear uno.', 'info');
  }
}

// Inicializar cuando se carga la página
document.addEventListener('DOMContentLoaded', function() {
  updateCartCounter();
  
  // Agregar enlace dinámico al carrito en el navbar si existe
  const navCartLink = document.querySelector('a[href*="carrito"], a[href*="cart"]');
  if (navCartLink && currentCartId) {
    navCartLink.href = `/carts/${currentCartId}`;
    navCartLink.onclick = goToCurrentCart;
  }
});
</script>

<!-- Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
